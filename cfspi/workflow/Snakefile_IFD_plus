# Main pipeline
# Specify snakemake version
from snakemake.utils import min_version
from os.path import join as opj
min_version("6.3.0")

#configfile: "config/config.yaml"

# This defines the sample name should never contain underscore to avoid confusing rule determination.
wildcard_constraints:
    sample_name='[^_\W]+'

report: "report/workflow.rst"

### load rules ###
include: "rules/common.smk"
include: "rules/trim.smk"

print("Unit file path:", config["units"])

###
OUTDIR=config["outdir"]+"/"+config['output_folder']

## sort memory and disk  requirement 
def get_mem_mb(wildcards, attempt):
    return attempt * 16000

def get_disk_mb(wildcards, attempt):
    return attempt * 150000

def get_time(wildcards, attempt):
    return attempt  * 60 + 60

def get_time_180_60(wildcards, attempt):
    return attempt * 60 + 180

def get_time_30_120(wildcards, attempt):
    return attempt * 120 + 30
# rules that doesn't require much computational time and power are defied as local rules
# all the output files should be defined at rule all
rule all:
    input:
        # git version
        expand("{OUTDIR}git-version.log", OUTDIR=OUTDIR),

        #concat_fastq
        expand("{OUTDIR}results/raw_fastq/{sample_name}_R1.fastq.gz", sample_name=units['sample_name'], OUTDIR=OUTDIR),
        expand("{OUTDIR}results/raw_fastq/{sample_name}_R2.fastq.gz", sample_name=units['sample_name'], OUTDIR=OUTDIR),

        #fastqc
        expand("{OUTDIR}done/e_fastqc/{sample_name}.done", sample_name=units['sample_name'], OUTDIR=OUTDIR),

        #QC
        expand("{OUTDIR}results/clean_fastq/{sample_name}_R1_trimmed_truncated.fastq.gz", sample_name=units['sample_name'], OUTDIR=OUTDIR),
        expand("{OUTDIR}results/clean_fastq/{sample_name}_R2_trimmed_truncated.fastq.gz", sample_name=units['sample_name'], OUTDIR=OUTDIR),

        #mapping to host 
        expand("{OUTDIR}results/host_mapping/{sample_name}_unmapped_host_r1.fq", sample_name=units['sample_name'], OUTDIR=OUTDIR),
        expand("{OUTDIR}results/host_mapping/{sample_name}_unmapped_host_r2.fq", sample_name=units['sample_name'], OUTDIR=OUTDIR),

        #kraken output
        expand("{OUTDIR}results/kraken2_report/after_host_mapping/{sample_name}_{database}_conf{k2_threshold}.report", database=config['database'], k2_threshold=config['k2_threshold'], sample_name=units['sample_name'], OUTDIR=OUTDIR),
        expand("{OUTDIR}results/kraken2_output/after_host_mapping/{sample_name}_{database}_conf{k2_threshold}.output_classified", database=config['database'], k2_threshold=config['k2_threshold'], sample_name=units['sample_name'], OUTDIR=OUTDIR),

        #additional
        expand("{OUTDIR}results/stats/{sample_name}_R1_XX_grch38_mapp_fastq.txt", sample_name=units['sample_name'], OUTDIR=OUTDIR),
        expand("{OUTDIR}results/stats/{sample_name}_R1_XX_chm13_mapp_fastq.txt", sample_name=units['sample_name'], OUTDIR=OUTDIR),

        expand("{OUTDIR}results/grch38_mapping/{sample_name}_unmapped_grch38_r1.fq", sample_name=units['sample_name'], OUTDIR=OUTDIR), 
        expand("{OUTDIR}results/chm13_mapping/{sample_name}_unmapped_chm13_r1.fq", sample_name=units['sample_name'], OUTDIR=OUTDIR),
        expand("{OUTDIR}results/chm13_mapping/{sample_name}_alligned_chm13_pe_sorted.bam", sample_name=units['sample_name'], OUTDIR=OUTDIR),
	
        expand("{OUTDIR}results/kraken2_standardDB_report/chm13_grch38/{sample_name}_conf{k2_threshold}.report", k2_threshold=config['k2_threshold'], sample_name=units['sample_name'], OUTDIR=OUTDIR),
        expand("{OUTDIR}results/kraken2_standardDB_report/chm13/{sample_name}_conf{k2_threshold}.report", k2_threshold=config['k2_threshold'], sample_name=units['sample_name'], OUTDIR=OUTDIR),
        expand("{OUTDIR}results/kraken2_standardDB_report/grch38/{sample_name}_conf{k2_threshold}.report", k2_threshold=config['k2_threshold'], sample_name=units['sample_name'], OUTDIR=OUTDIR), 
        expand("{OUTDIR}results/kraken2_standardDB_output/chm13_grch38/{sample_name}_conf{k2_threshold}.output_classified", k2_threshold=config['k2_threshold'], sample_name=units['sample_name'], OUTDIR=OUTDIR),
        expand("{OUTDIR}results/kraken2_standardDB_output/chm13/{sample_name}_conf{k2_threshold}.output_classified", k2_threshold=config['k2_threshold'], sample_name=units['sample_name'], OUTDIR=OUTDIR),
        expand("{OUTDIR}results/kraken2_standardDB_output/grch38/{sample_name}_conf{k2_threshold}.output_classified", k2_threshold=config['k2_threshold'], sample_name=units['sample_name'], OUTDIR=OUTDIR), 

localrules: all, get_version_control
rule get_version_control:
    output:
        opj(OUTDIR, "git-version.log")
    shell:
        "echo git branch: > {output};"
        "git branch >> {output};"
        "echo ================================ >> {output};"
        "echo git log: >> {output};"
        "git log -1  >> {output};"
        "echo ================================ >> {output};"
        "echo git status: >> {output};"
        "git status >> {output};"
        "echo ================================ >> {output};"
        "echo git diff: >> {output};"
        "git diff  >> {output};"

rule a_concat_fastq:
    input:
        get_fq
    output:
        R1_raw=temp(opj(OUTDIR, 'results/tmp/{sample_name}_R1.fastq')),
        R2_raw=temp(opj(OUTDIR, 'results/tmp/{sample_name}_R2.fastq')),

        stats_R1=opj(OUTDIR, 'results/stats/{sample_name}_R1_01_raw_fastq.txt'),
        stats_R2=opj(OUTDIR, 'results/stats/{sample_name}_R2_01_raw_fastq.txt'),

        R1_raw_gz=opj(opj(OUTDIR, 'results/raw_fastq/{sample_name}_R1.fastq.gz')),
        R2_raw_gz=opj(opj(OUTDIR, 'results/raw_fastq/{sample_name}_R2.fastq.gz')),

        done=touch(opj(OUTDIR, "done/a_concat_fastq/{sample_name}.done")),
    benchmark:
        opj(OUTDIR, "benchmark/a_concat_fastq/{sample_name}.tsv"),
    group:
        "QC"
    resources:
        mem_mb = 10000,
        runtime_min = get_time,
        cpus = 1, 
        disk_mb = 12000, 
    threads: 1
    shell:
        """
        mkdir -p {OUTDIR}
        zcat {input}/*R1*.fastq.gz > '{output.R1_raw}';
        zcat {input}/*R2*.fastq.gz > '{output.R2_raw}';
        echo $(cat {output.R1_raw} | wc -l )/4 | bc > '{output.stats_R1}';
        echo $(cat {output.R2_raw} | wc -l )/4 | bc > '{output.stats_R2}';
        gzip -c {output.R1_raw} > {output.R1_raw_gz};
        gzip -c {output.R2_raw} > {output.R2_raw_gz};
        """

rule b_unique_nubeam:
    input:
        R1_raw=rules.a_concat_fastq.output.R1_raw,
        R2_raw=rules.a_concat_fastq.output.R2_raw,
    output:
        R1_nubeam=temp(opj(OUTDIR, 'results/tmp/{sample_name}_R1_uniq.fastq')),   
        R2_nubeam=temp(opj(OUTDIR, 'results/tmp/{sample_name}_R2_uniq.fastq')),

        stats_R1=opj(OUTDIR, 'results/stats/{sample_name}_R1_02_uniq_fastq.txt'),
        stats_R2=opj(OUTDIR, 'results/stats/{sample_name}_R2_02_uniq_fastq.txt'),

        done=touch(opj(OUTDIR, "done/b_unique_nubeam/{sample_name}.done")),
    priority: 46
    benchmark:
        opj(OUTDIR, "benchmark/b_unique_nubeam/{sample_name}.tsv"),
    group:
        "QC"
    resources:
        mem_mb = get_mem_mb,
        runtime_min = 21600,
        cpus = 1, 
        disk_mb = 12000, 
    log:
        log=opj(OUTDIR, "log/b_unique_nubeam/{sample_name}.log"),
    shell:
        """
        ./resources/nubeam-dedup -i1 {input.R1_raw} -i2 {input.R2_raw} -o1 {output.R1_nubeam} -o2 {output.R2_nubeam} -s 1 -r 0 2>&1 > {log.log};

        echo $(cat {output.R1_nubeam}| wc -l )/4 | bc > '{output.stats_R1}';
        echo $(cat {output.R2_nubeam}| wc -l )/4 | bc > '{output.stats_R2}';
        """

rule c_fastp:
    input:
        R1_nubeam=rules.b_unique_nubeam.output.R1_nubeam,
        R2_nubeam=rules.b_unique_nubeam.output.R2_nubeam,
    output:
        R1_trimmed=temp(opj(OUTDIR, "results/tmp/{sample_name}_R1_trimmed.fastq")),
        R2_trimmed=temp(opj(OUTDIR, "results/tmp/{sample_name}_R2_trimmed.fastq")),

        stats_R1=opj(OUTDIR, 'results/stats/{sample_name}_R1_03_fastp_fastq.txt'),
        stats_R2=opj(OUTDIR, 'results/stats/{sample_name}_R2_03_fastp_fastq.txt'),

        html=opj(OUTDIR, "reports/fastp/{sample_name}_fastp.html"),
        json=opj(OUTDIR, "reports/fastp/{sample_name}_fastp.json"),
        failed=temp(opj(OUTDIR, "results/tmp/fastp_{sample_name}.fastq")),

        done=touch(opj(OUTDIR, "done/c_fastp/{sample_name}.done")),
    group:
        "QC"
    priority: 47
    resources:
        mem_mb = 10000,
        runtime_min = get_time_30_120,
        cpus = 16, 
        disk_mb = 12000, 
    log:
        log=opj(OUTDIR, "log/c_fastp/{sample_name}.log"),
    threads: 16
    benchmark:
        opj(OUTDIR, "benchmark/c_fastp/{sample_name}.tsv"),
    conda:
        "envs/fastp.yaml"
    shell:
        """
        fastp --thread {threads} --in1 {input.R1_nubeam} --in2 {input.R2_nubeam} --out1 {output.R1_trimmed} --out2 {output.R2_trimmed} \
        --failed_out {output.failed} -h {output.html} -j {output.json} 2>&1 > {log.log};

        echo $(cat {output.R1_trimmed} | wc -l )/4 | bc  > '{output.stats_R1}';
        echo $(cat {output.R2_trimmed} | wc -l )/4 | bc  > '{output.stats_R2}';
        """

rule d_adapter_removal:
    input:
        R1_trimmed=rules.c_fastp.output.R1_trimmed,
        R2_trimmed=rules.c_fastp.output.R2_trimmed,
    output:
        singleton=temp(opj(OUTDIR, "results/tmp/{sample_name}_singleton_trimmed_truncated")),
        R1_truncated=temp(opj(OUTDIR, 'results/clean_fastq/{sample_name}_R1_trimmed_truncated.fastq')),
        R2_truncated=temp(opj(OUTDIR, 'results/clean_fastq/{sample_name}_R2_trimmed_truncated.fastq')),

        R1_truncated_gz=opj(OUTDIR, 'results/clean_fastq/{sample_name}_R1_trimmed_truncated.fastq.gz'),
        R2_truncated_gz=opj(OUTDIR, 'results/clean_fastq/{sample_name}_R2_trimmed_truncated.fastq.gz'),

        stats_R1=opj(OUTDIR, 'results/stats/{sample_name}_R1_04_adapt_remov_fastq.txt'),
        stats_R2=opj(OUTDIR, 'results/stats/{sample_name}_R2_04_adapt_remov_fastq.txt'),

        settings=opj(OUTDIR, "reports/adapter_removal/{sample_name}_adapter_removal_settings.txt"),
        discarded=temp(opj(OUTDIR, "results/tmp/{sample_name}_trimmed_discarded.fastq")),
        done=touch(opj(OUTDIR, "done/d_adapter_removal/{sample_name}.done")),

    group:
        "QC"
    priority: 48
    log:
        log=opj(OUTDIR, "log/d_adapter_removal/{sample_name}.log"),
    params:
        mq = config['adapter_removal']['minquality'],
        tmns = config['adapter_removal']['trimns'],
        ml = config['k_mer_length'],
        adapter_R1 = get_adapter_R1,
        adapter_R2 = get_adapter_R2,
        base_name = "{sample_name}"
    resources:
        mem_mb = get_mem_mb,
        runtime_min = 4800,
        cpus = 16,
        disk_mb = get_disk_mb, 
    threads: 16
    conda:
        "envs/adapter_removal.yaml"
    benchmark:
        opj(OUTDIR, "benchmark/d_adapter_removal/{sample_name}.tsv"),
    shell:
        """
        AdapterRemoval --threads {threads} --file1 {input.R1_trimmed} --file2 {input.R2_trimmed} --basename {params.base_name} --minlength {params.ml} --trimqualities --minquality {params.mq} {params.tmns} --adapter1 {params.adapter_R1} --adapter2 {params.adapter_R2} \
        --output1 {output.R1_truncated} --output2 {output.R2_truncated} --singleton {output.singleton} --discarded {output.discarded} --settings {output.settings} 2>&1 > {log.log};

        echo $(cat {output.R1_truncated} | wc -l )/4 | bc > {output.stats_R1};
        echo $(cat {output.R2_truncated} | wc -l )/4 | bc > {output.stats_R2};

        gzip -cvf {output.R1_truncated} > {output.R1_truncated_gz};
        gzip -cvf {output.R2_truncated} > {output.R2_truncated_gz};
        """

rule e_fastqc:
    input:
        R1_raw=rules.a_concat_fastq.output.R1_raw,
        R2_raw=rules.a_concat_fastq.output.R2_raw,
        R1_truncated=rules.d_adapter_removal.output.R1_truncated,
        R2_truncated=rules.d_adapter_removal.output.R2_truncated,
    output:
        done=touch(opj(OUTDIR, "done/e_fastqc/{sample_name}.done")),
    group:
        "QC"
    priority: 1
    log:
        log=opj(OUTDIR, "log/e_fastqc/{sample_name}.log"),
    params:
        out_dir=opj(OUTDIR, "reports/fastqc/"),
    resources:
        mem_mb = 30000,
        runtime_min = 3600, 
        cpus = 16, 
        disk_mb = 30000, 
    threads: 1
    benchmark:
        opj(OUTDIR, "benchmark/e_fastqc/{sample_name}.tsv"),
    conda:
        "envs/fastqc.yaml"
    shell:
        """
        mkdir -p {params.out_dir}
        fastqc -t 1 -o {params.out_dir} {input.R1_raw} 2>&1 > {log.log};
        fastqc -t 1 -o {params.out_dir} {input.R2_raw} 2>&1 > {log.log};

        fastqc -t 1 -o {params.out_dir} {input.R1_truncated} 2>&1 > {log.log};
        fastqc -t 1 -o {params.out_dir} {input.R2_truncated} 2>&1 > {log.log};
        """

rule f_host_mapping:
    input:
        R1_truncated=rules.d_adapter_removal.output.R1_truncated_gz,
        R2_truncated=rules.d_adapter_removal.output.R2_truncated_gz,   
    output:
        host_sam=temp(opj(OUTDIR, 'results/tmp/{sample_name}_alligned_host_pe.sam')),
        host_bam=temp(opj(OUTDIR, 'results/tmp/{sample_name}_alligned_host_pe.bam')),

        host_unmpd_r1=opj(OUTDIR, 'results/host_mapping/{sample_name}_unmapped_host_r1.fq'),
        host_unmpd_r2=opj(OUTDIR, 'results/host_mapping/{sample_name}_unmapped_host_r2.fq'),

        stats_R1=opj(OUTDIR, 'results/stats/{sample_name}_R1_05_host_mapp_fastq.txt'),
        stats_R2=opj(OUTDIR, 'results/stats/{sample_name}_R2_05_host_mapp_fastq.txt'),

        done=touch(opj(OUTDIR, "done/f_host_mapping/{sample_name}.done")),
    priority: 49
    params:
        reference=config["reference_genome_dir"]+"/"+config["reference_genome"],
    threads: 32
    benchmark:
        opj(OUTDIR, "benchmark/f_host_mapping/{sample_name}.tsv"),
    conda:
        "envs/mapping.yaml"
    resources:
        mem_mb = 50000,
        runtime_min = 2400,
        cpus = 32,
        disk_mb = 50000,
    shell:
        """
        bowtie2 -p {threads} -x {params.reference} -1 {input.R1_truncated} -2 {input.R2_truncated} > {output.host_sam};
        samtools view -b {output.host_sam} -o {output.host_bam};
        samtools bam2fq -f 12 {output.host_bam} -1 {output.host_unmpd_r1} -2 {output.host_unmpd_r2};
        grep -c "^@" {output.host_unmpd_r1} > {output.stats_R1};
        grep -c "^@" {output.host_unmpd_r2} > {output.stats_R2};
        """

rule ff_chm13_mapping:
    input:
        R1_truncated=rules.d_adapter_removal.output.R1_truncated_gz,
        R2_truncated=rules.d_adapter_removal.output.R2_truncated_gz,   
    output:
        host_sam=temp(opj(OUTDIR, 'results/tmp/{sample_name}_alligned_chm13_pe.sam')),
        host_bam=temp(opj(OUTDIR, 'results/chm13_mapping/{sample_name}_alligned_chm13_pe.bam')),
        host_bam_sorted=opj(OUTDIR, 'results/chm13_mapping/{sample_name}_alligned_chm13_pe_sorted.bam'),

        host_unmpd_r1=opj(OUTDIR, 'results/chm13_mapping/{sample_name}_unmapped_chm13_r1.fq'),
        host_unmpd_r2=opj(OUTDIR, 'results/chm13_mapping/{sample_name}_unmapped_chm13_r2.fq'),

        stats_R1=opj(OUTDIR, 'results/stats/{sample_name}_R1_XX_chm13_mapp_fastq.txt'),
        stats_R2=opj(OUTDIR, 'results/stats/{sample_name}_R2_XX_chm13_mapp_fastq.txt'),
    priority: 50
    threads: 32
    benchmark:
        opj(OUTDIR, "benchmark/ff_chm13_mapping/{sample_name}.tsv"),
    params:
        ref_genome_dir=config['reference_genome_dir'],
    conda:
        "envs/mapping.yaml"
    resources:
        mem_mb = 50000,
        runtime_min = 2400,
        cpus = 32,
        disk_mb = 50000,
    shell:
        """
        bowtie2 -p {threads} -x {params.ref_genome_dir}chm13v2.0 -1 {input.R1_truncated} -2 {input.R2_truncated} > {output.host_sam};
        samtools view -b {output.host_sam} -o {output.host_bam};
        samtools sort {output.host_bam} -o {output.host_bam_sorted};
        samtools bam2fq -f 12 {output.host_bam} -1 {output.host_unmpd_r1} -2 {output.host_unmpd_r2};
        grep -c "^@" {output.host_unmpd_r1} > {output.stats_R1};
        grep -c "^@" {output.host_unmpd_r2} > {output.stats_R2};
        """

rule ff_grch38_mapping:
    input:
        R1_truncated=rules.d_adapter_removal.output.R1_truncated_gz,
        R2_truncated=rules.d_adapter_removal.output.R2_truncated_gz,   
    output:
        host_sam=temp(opj(OUTDIR, 'results/tmp/{sample_name}_alligned_grch38_pe.sam')),
        host_bam=temp(opj(OUTDIR, 'results/tmp/{sample_name}_alligned_grch38_pe.bam')),

        host_unmpd_r1=opj(OUTDIR, 'results/grch38_mapping/{sample_name}_unmapped_grch38_r1.fq'),
        host_unmpd_r2=opj(OUTDIR, 'results/grch38_mapping/{sample_name}_unmapped_grch38_r2.fq'),

        stats_R1=opj(OUTDIR, 'results/stats/{sample_name}_R1_XX_grch38_mapp_fastq.txt'),
        stats_R2=opj(OUTDIR, 'results/stats/{sample_name}_R2_XX_grch38_mapp_fastq.txt'),
    priority: 50
    threads: 32
    benchmark:
        opj(OUTDIR, "benchmark/ff_grch38_mapping/{sample_name}.tsv"),
    params:
        ref_genome_dir=config['reference_genome_dir'],
    conda:
        "envs/mapping.yaml"
    resources:
        mem_mb = 50000,
        runtime_min = 2400,
        cpus = 32,
        disk_mb = 50000,
    shell:
        """
        bowtie2 -p {threads} -x {params.ref_genome_dir}GCF_000001405.40_GRCh38.p14_genomic -1 {input.R1_truncated} -2 {input.R2_truncated} > {output.host_sam};
        samtools view -b {output.host_sam} -o {output.host_bam};
        samtools bam2fq -f 12 {output.host_bam} -1 {output.host_unmpd_r1} -2 {output.host_unmpd_r2};
        grep -c "^@" {output.host_unmpd_r1} > {output.stats_R1};
        grep -c "^@" {output.host_unmpd_r2} > {output.stats_R2};
        """

rule fff_kraken2_standardDB:
    input:
        R1_chm13_grch38=rules.f_host_mapping.output.host_unmpd_r1,
        R2_chm13_grch38=rules.f_host_mapping.output.host_unmpd_r2,

        R1_chm13=rules.ff_chm13_mapping.output.host_unmpd_r1,
        R2_chm13=rules.ff_chm13_mapping.output.host_unmpd_r2,   

        R1_grch38=rules.ff_grch38_mapping.output.host_unmpd_r1,
        R2_grch38=rules.ff_grch38_mapping.output.host_unmpd_r2,   
    params:
        threshold="{k2_threshold}", 
        database_dir=config['database_dir'],
    output:
        k2_chm13_grch38_rep=opj(OUTDIR, 'results/kraken2_standardDB_report/chm13_grch38/{sample_name}_conf{k2_threshold}.report'),
        k2_chm13_grch38_out=temp(opj(OUTDIR, 'results/kraken2_standardDB_output/chm13_grch38/{sample_name}_conf{k2_threshold}.output')),
        k2_chm13_grch38_clf=opj(OUTDIR, 'results/kraken2_standardDB_output/chm13_grch38/{sample_name}_conf{k2_threshold}.output_classified'),

        k2_chm13_rep=opj(OUTDIR, 'results/kraken2_standardDB_report/chm13/{sample_name}_conf{k2_threshold}.report'),
        k2_chm13_out=temp(opj(OUTDIR, 'results/kraken2_standardDB_output/chm13/{sample_name}_conf{k2_threshold}.output')),
        k2_chm13_clf=opj(OUTDIR, 'results/kraken2_standardDB_output/chm13/{sample_name}_conf{k2_threshold}.output_classified'),

        k2_grch38_rep=opj(OUTDIR, 'results/kraken2_standardDB_report/grch38/{sample_name}_conf{k2_threshold}.report'),
        k2_grch38_out=temp(opj(OUTDIR, 'results/kraken2_standardDB_output/grch38/{sample_name}_conf{k2_threshold}.output')),
        k2_grch38_clf=opj(OUTDIR, 'results/kraken2_standardDB_output/grch38/{sample_name}_conf{k2_threshold}.output_classified'),

        done_chm13_grch38=touch(opj(OUTDIR, "done/fff_kraken2_standardDB/{sample_name}_conf{k2_threshold}.done")),
    priority: 50
    benchmark:
        opj(OUTDIR, "benchmark/fff_kraken2_standardDB/{sample_name}_conf{k2_threshold}.tsv"),
    conda:
        "envs/kracken.yaml"
    resources:
        mem_mb = 128000,
        runtime_min = 180,
        cpus = 16,
        disk_mb = 128000,
    threads: 16
    shell:
        """
        kraken2 --confidence {params.threshold} --db {params.database_dir}RS_minusT2T --threads {threads} --report-zero-counts --report-minimizer-data --output {output.k2_chm13_grch38_out} --report {output.k2_chm13_grch38_rep} --paired {input.R1_chm13_grch38} {input.R2_chm13_grch38} ; 
        grep -v "^U"  {output.k2_chm13_grch38_out} > {output.k2_chm13_grch38_clf};

        kraken2 --confidence {params.threshold} --db {params.database_dir}RS_minusT2T --threads {threads} --report-zero-counts --report-minimizer-data --output {output.k2_chm13_out} --report {output.k2_chm13_rep} --paired {input.R1_chm13} {input.R2_chm13} ; 
        grep -v "^U"  {output.k2_chm13_out} > {output.k2_chm13_clf};

        kraken2 --confidence {params.threshold} --db {params.database_dir}RS_minusT2T --threads {threads} --report-zero-counts --report-minimizer-data --output {output.k2_grch38_out} --report {output.k2_grch38_rep} --paired {input.R1_grch38} {input.R2_grch38} ; 
        grep -v "^U"  {output.k2_grch38_out} > {output.k2_grch38_clf};
        """

rule g_kraken2:
    input:
        unm_r1 = rules.f_host_mapping.output.host_unmpd_r1,
        unm_r2 = rules.f_host_mapping.output.host_unmpd_r2,
    params:
        db = config["database_dir"]+"/"+"{database}",
        threshold="{k2_threshold}", 
    output:
        k2_report_hm=opj(OUTDIR, 'results/kraken2_report/after_host_mapping/{sample_name}_{database}_conf{k2_threshold}.report'),
        k2_output_hm=temp(opj(OUTDIR, 'results/kraken2_output/after_host_mapping/{sample_name}_{database}_conf{k2_threshold}.output')),
        k2_output_class_hm=opj(OUTDIR, 'results/kraken2_output/after_host_mapping/{sample_name}_{database}_conf{k2_threshold}.output_classified'),

        done=touch(opj(OUTDIR, "done/g_kraken2/{sample_name}_{database}_conf{k2_threshold}.done")),
    priority: 60
    resources:
        mem_mb = 128000,
        runtime_min = 60,
        cpus = 16,
        disk_mb = 128000,
    threads: 8
    benchmark:
        opj(OUTDIR, "benchmark/g_kraken2/{sample_name}_{database}_conf{k2_threshold}.tsv"),
    conda:
        "envs/kraken.yaml"
    shell:
        """
        kraken2 --confidence {params.threshold} --db {params.db} --threads {threads} --report-zero-counts --report-minimizer-data --output {output.k2_output_hm} --report {output.k2_report_hm} --paired {input.unm_r1} {input.unm_r2};
        grep -v "^U" {output.k2_output_hm} > {output.k2_output_class_hm}
        """
